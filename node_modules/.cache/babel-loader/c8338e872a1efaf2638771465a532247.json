{"ast":null,"code":"import Backend from \"i18next-http-backend\";\n\nclass CustomBackend extends Backend {\n  constructor(services, options = {}) {\n    super(services, options);\n  }\n\n  read(language, namespace, callback) {\n    var loadPath = this.options.loadPath;\n    const payload = this.options.parseLoadPayload({\n      lng: language,\n      ns: namespace\n    });\n\n    if (typeof this.options.loadPath === \"function\") {\n      loadPath = this.options.loadPath([language], [namespace]);\n    }\n\n    let url = this.services.interpolator.interpolate(loadPath, {\n      lng: language,\n      ns: namespace\n    });\n    this.loadUrl(url, callback, payload);\n  }\n\n  loadUrl(url, callback, payload) {\n    this.options.ajax(url, this.options, (data, xhr) => {\n      if (xhr.status >= 500 && xhr.status < 600) return callback(\"failed loading \" + url, true\n      /* retry */\n      );\n      if (xhr.status >= 400 && xhr.status < 500) return callback(\"failed loading \" + url, false\n      /* no retry */\n      );\n      let ret, err;\n\n      try {\n        ret = this.options.parse(data, url);\n      } catch (e) {\n        err = \"failed parsing \" + url + \" to json\";\n      }\n\n      if (err) return callback(err, false);\n      callback(null, ret);\n    }, payload);\n  }\n\n}\n\nexport default CustomBackend;","map":{"version":3,"sources":["/home/kris/projekty/budget-app/src/i18n/CustomBackend.js"],"names":["Backend","CustomBackend","constructor","services","options","read","language","namespace","callback","loadPath","payload","parseLoadPayload","lng","ns","url","interpolator","interpolate","loadUrl","ajax","data","xhr","status","ret","err","parse","e"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,sBAApB;;AAEA,MAAMC,aAAN,SAA4BD,OAA5B,CAAoC;AAClCE,EAAAA,WAAW,CAACC,QAAD,EAAWC,OAAO,GAAG,EAArB,EAAyB;AAClC,UAAMD,QAAN,EAAgBC,OAAhB;AACD;;AACDC,EAAAA,IAAI,CAACC,QAAD,EAAWC,SAAX,EAAsBC,QAAtB,EAAgC;AAClC,QAAIC,QAAQ,GAAG,KAAKL,OAAL,CAAaK,QAA5B;AACA,UAAMC,OAAO,GAAG,KAAKN,OAAL,CAAaO,gBAAb,CAA8B;AAC5CC,MAAAA,GAAG,EAAEN,QADuC;AAE5CO,MAAAA,EAAE,EAAEN;AAFwC,KAA9B,CAAhB;;AAIA,QAAI,OAAO,KAAKH,OAAL,CAAaK,QAApB,KAAiC,UAArC,EAAiD;AAC/CA,MAAAA,QAAQ,GAAG,KAAKL,OAAL,CAAaK,QAAb,CAAsB,CAACH,QAAD,CAAtB,EAAkC,CAACC,SAAD,CAAlC,CAAX;AACD;;AAED,QAAIO,GAAG,GAAG,KAAKX,QAAL,CAAcY,YAAd,CAA2BC,WAA3B,CAAuCP,QAAvC,EAAiD;AACzDG,MAAAA,GAAG,EAAEN,QADoD;AAEzDO,MAAAA,EAAE,EAAEN;AAFqD,KAAjD,CAAV;AAKA,SAAKU,OAAL,CAAaH,GAAb,EAAkBN,QAAlB,EAA4BE,OAA5B;AACD;;AACDO,EAAAA,OAAO,CAACH,GAAD,EAAMN,QAAN,EAAgBE,OAAhB,EAAyB;AAC9B,SAAKN,OAAL,CAAac,IAAb,CACEJ,GADF,EAEE,KAAKV,OAFP,EAGE,CAACe,IAAD,EAAOC,GAAP,KAAe;AACb,UAAIA,GAAG,CAACC,MAAJ,IAAc,GAAd,IAAqBD,GAAG,CAACC,MAAJ,GAAa,GAAtC,EACE,OAAOb,QAAQ,CAAC,oBAAoBM,GAArB,EAA0B;AAAK;AAA/B,OAAf;AACF,UAAIM,GAAG,CAACC,MAAJ,IAAc,GAAd,IAAqBD,GAAG,CAACC,MAAJ,GAAa,GAAtC,EACE,OAAOb,QAAQ,CAAC,oBAAoBM,GAArB,EAA0B;AAAM;AAAhC,OAAf;AAEF,UAAIQ,GAAJ,EAASC,GAAT;;AACA,UAAI;AACFD,QAAAA,GAAG,GAAG,KAAKlB,OAAL,CAAaoB,KAAb,CAAmBL,IAAnB,EAAyBL,GAAzB,CAAN;AACD,OAFD,CAEE,OAAOW,CAAP,EAAU;AACVF,QAAAA,GAAG,GAAG,oBAAoBT,GAApB,GAA0B,UAAhC;AACD;;AACD,UAAIS,GAAJ,EAAS,OAAOf,QAAQ,CAACe,GAAD,EAAM,KAAN,CAAf;AACTf,MAAAA,QAAQ,CAAC,IAAD,EAAOc,GAAP,CAAR;AACD,KAjBH,EAkBEZ,OAlBF;AAoBD;;AA1CiC;;AA4CpC,eAAeT,aAAf","sourcesContent":["import Backend from \"i18next-http-backend\";\n\nclass CustomBackend extends Backend {\n  constructor(services, options = {}) {\n    super(services, options);\n  }\n  read(language, namespace, callback) {\n    var loadPath = this.options.loadPath;\n    const payload = this.options.parseLoadPayload({\n      lng: language,\n      ns: namespace,\n    });\n    if (typeof this.options.loadPath === \"function\") {\n      loadPath = this.options.loadPath([language], [namespace]);\n    }\n\n    let url = this.services.interpolator.interpolate(loadPath, {\n      lng: language,\n      ns: namespace,\n    });\n\n    this.loadUrl(url, callback, payload);\n  }\n  loadUrl(url, callback, payload) {\n    this.options.ajax(\n      url,\n      this.options,\n      (data, xhr) => {\n        if (xhr.status >= 500 && xhr.status < 600)\n          return callback(\"failed loading \" + url, true /* retry */);\n        if (xhr.status >= 400 && xhr.status < 500)\n          return callback(\"failed loading \" + url, false /* no retry */);\n\n        let ret, err;\n        try {\n          ret = this.options.parse(data, url);\n        } catch (e) {\n          err = \"failed parsing \" + url + \" to json\";\n        }\n        if (err) return callback(err, false);\n        callback(null, ret);\n      },\n      payload\n    );\n  }\n}\nexport default CustomBackend;\n"]},"metadata":{},"sourceType":"module"}